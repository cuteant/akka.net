<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

<# var count = 7; #>
namespace Akka.Actor
{
    public static class IActionSchedulerExtensions
    {
<# for (int i = 1; i <= count; i++) {
    var types = string.Join(", ", Enumerable.Range(1, i).Select(x => "TArg" + x));
    var arguments = string.Join(", ", Enumerable.Range(1, i).Select(x => "arg" + x));
    var typeAndArguments = string.Join(", ", Enumerable.Range(1, i).Select(x => "TArg" + x + " arg" + x));
#>
        /// <summary>
        /// Schedules an action to be invoked after an delay. The action is wrapped so that it
        /// completes inside the currently active actor if it is called from within an actor.
        /// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
        /// </summary>
        /// <param name="scheduler">The scheduler used to schedule the invocation of the action.</param>
        /// <param name="delay">The time period that has to pass before the action is invoked.</param>
        /// <param name="action">The action that is being scheduled.</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        /// <param name="cancelable">OPTIONAL. A cancelable that can be used to cancel the action from being executed. Defaults to <c>null</c></param>
        public static void ScheduleOnce<<#= types #>>(this IActionScheduler scheduler, TimeSpan delay, Action<<#= types #>> action, <#= typeAndArguments #>, ICancelable cancelable = null)
        {
            scheduler.ScheduleOnce(delay, Runnable.Create(action, <#= arguments #>), cancelable);
        }

        /// <summary>
        /// Schedules an action to be invoked after an delay. The action is wrapped so that it
        /// completes inside the currently active actor if it is called from within an actor.
        /// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
        /// </summary>
        /// <param name="scheduler">The scheduler used to schedule the invocation of the action.</param>
        /// <param name="millisecondsDelay">The time in milliseconds that has to pass before the action is invoked.</param>
        /// <param name="action">The action that is being scheduled.</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        /// <param name="cancelable">OPTIONAL. A cancelable that can be used to cancel the action from being executed. Defaults to <c>null</c></param>
        public static void ScheduleOnce<<#= types #>>(this IActionScheduler scheduler, int millisecondsDelay, Action<<#= types #>> action, <#= typeAndArguments #>, ICancelable cancelable = null)
        {
            scheduler.ScheduleOnce(TimeSpan.FromMilliseconds(millisecondsDelay), Runnable.Create(action, <#= arguments #>), cancelable);
        }

        /// <summary>
        /// Schedules an action to be invoked after an delay. The action is wrapped so that it
        /// completes inside the currently active actor if it is called from within an actor.
        /// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
        /// </summary>
        /// <param name="scheduler">The scheduler used to schedule the invocation of the action.</param>
        /// <param name="millisecondsDelay">The time in milliseconds that has to pass before the action is invoked.</param>
        /// <param name="action">The action that is being scheduled.</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        public static ICancelable ScheduleOnceCancelable<<#= types #>>(this IActionScheduler scheduler, int millisecondsDelay, Action<<#= types #>> action, <#= typeAndArguments #>)
        {
            var cancelable = new Cancelable(scheduler);
            scheduler.ScheduleOnce(TimeSpan.FromMilliseconds(millisecondsDelay), Runnable.Create(action, <#= arguments #>), cancelable);
            return cancelable;
        }

        /// <summary>
        /// Schedules an action to be invoked after an delay. The action is wrapped so that it
        /// completes inside the currently active actor if it is called from within an actor.
        /// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
        /// </summary>
        /// <param name="scheduler">The scheduler used to schedule the invocation of the action.</param>
        /// <param name="delay">The time period that has to pass before the action is invoked.</param>
        /// <param name="action">The action that is being scheduled.</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        public static ICancelable ScheduleOnceCancelable<<#= types #>>(this IActionScheduler scheduler, TimeSpan delay, Action<<#= types #>> action, <#= typeAndArguments #>)
        {
            var cancelable = new Cancelable(scheduler);
            scheduler.ScheduleOnce(delay, Runnable.Create(action, <#= arguments #>), cancelable);
            return cancelable;
        }

        /// <summary>
        /// Schedules an action to be invoked after an initial delay and then repeatedly.
        /// The action is wrapped so that it completes inside the currently active actor
        /// if it is called from within an actor.
        /// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
        /// </summary>
        /// <param name="scheduler">The scheduler used to schedule the invocation of the action.</param>
        /// <param name="initialDelay">The time period that has to pass before first invocation of the action.</param>
        /// <param name="interval">The time period that has to pass between each invocation of the action.</param>
        /// <param name="action">The action that is being scheduled.</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        /// <param name="cancelable">A cancelable used to cancel the action from being executed.</param>
        public static void ScheduleRepeatedly<<#= types #>>(this IActionScheduler scheduler, TimeSpan initialDelay, TimeSpan interval, Action<<#= types #>> action, <#= typeAndArguments #>, ICancelable cancelable = null)
        {
            scheduler.ScheduleRepeatedly(initialDelay, interval, Runnable.Create(action, <#= arguments #>), cancelable);
        }

        /// <summary>
        /// Schedules an action to be invoked after an initial delay and then repeatedly.
        /// The action is wrapped so that it completes inside the currently active actor
        /// if it is called from within an actor.
        /// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
        /// </summary>
        /// <param name="scheduler">The scheduler used to schedule the invocation of the action.</param>
        /// <param name="initialMillisecondsDelay">The time in milliseconds that has to pass before first invocation of the action.</param>
        /// <param name="millisecondsInterval">The time in milliseconds that has to pass between each invocation of the action.</param>
        /// <param name="action">The action that is being scheduled.</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        /// <param name="cancelable">OPTIONAL. A cancelable used to cancel the action from being executed. Defaults to <c>null</c></param>
        public static void ScheduleRepeatedly<<#= types #>>(this IActionScheduler scheduler, int initialMillisecondsDelay, int millisecondsInterval, Action<<#= types #>> action, <#= typeAndArguments #>, ICancelable cancelable = null)
        {
            scheduler.ScheduleRepeatedly(TimeSpan.FromMilliseconds(initialMillisecondsDelay), TimeSpan.FromMilliseconds(millisecondsInterval), Runnable.Create(action, <#= arguments #>), cancelable);
        }

        /// <summary>
        /// Schedules an action to be invoked after an initial delay and then repeatedly.
        /// The action is wrapped so that it completes inside the currently active actor
        /// if it is called from within an actor.
        /// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
        /// </summary>
        /// <param name="scheduler">The scheduler used to schedule the invocation of the action.</param>
        /// <param name="initialMillisecondsDelay">The time in milliseconds that has to pass before first invocation of the action.</param>
        /// <param name="millisecondsInterval">The time in milliseconds that has to pass between each invocation of the action.</param>
        /// <param name="action">The action that is being scheduled.</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        public static ICancelable ScheduleRepeatedlyCancelable<<#= types #>>(this IActionScheduler scheduler, int initialMillisecondsDelay, int millisecondsInterval, Action<<#= types #>> action, <#= typeAndArguments #>)
        {
            var cancelable = new Cancelable(scheduler);
            scheduler.ScheduleRepeatedly(TimeSpan.FromMilliseconds(initialMillisecondsDelay), TimeSpan.FromMilliseconds(millisecondsInterval), Runnable.Create(action, <#= arguments #>), cancelable);
            return cancelable;
        }

        /// <summary>
        /// Schedules an action to be invoked after an initial delay and then repeatedly.
        /// The action is wrapped so that it completes inside the currently active actor
        /// if it is called from within an actor.
        /// <remarks>Note! It's considered bad practice to use concurrency inside actors, and very easy to get wrong so usage is discouraged.</remarks>
        /// </summary>
        /// <param name="scheduler">The scheduler used to schedule the invocation of the action.</param>
        /// <param name="initialDelay">The time period that has to pass before first invocation of the action.</param>
        /// <param name="interval">The time period that has to pass between each invocation of the action.</param>
        /// <param name="action">The action that is being scheduled.</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        public static ICancelable ScheduleRepeatedlyCancelable<<#= types #>>(this IActionScheduler scheduler, TimeSpan initialDelay, TimeSpan interval, Action<<#= types #>> action, <#= typeAndArguments #>)
        {
            var cancelable = new Cancelable(scheduler);
            scheduler.ScheduleRepeatedly(initialDelay, interval, Runnable.Create(action, <#= arguments #>), cancelable);
            return cancelable;
        }

<# } #>
    }
}
