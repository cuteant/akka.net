<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

<# var count = 7; #>
namespace Akka/*.Dispatch*/
{
<# for (int i = 1; i <= count; i++) {
    var types = string.Join(", ", Enumerable.Range(1, i).Select(x => "TArg" + x));
    var args = string.Join(", ", Enumerable.Range(1, i).Select(x => "owner._arg" + x));
    var args2 = "";
    if (i > 1)
    {
        args2 = string.Join(", ", Enumerable.Range(2, i - 1).Select(x => "_arg" + x));
    }
    var arguments = string.Join(", ", Enumerable.Range(1, i).Select(x => "_arg" + x));
    var typeAndArguments = string.Join(", ", Enumerable.Range(1, i).Select(x => "TArg" + x + " arg" + x));
#>
    /// <summary>
    /// <see cref="IRunnable"/> which executes an <see cref="Action{<#= types #>}"/> representing the state.
    /// </summary>
    public class ActionWithStateRunnable<<#= types #>> : OverridingArgumentRunnable<TArg1>, IRunnable2
    {
        private readonly Action<<#= types #>> _actionWithState;
<# for (var t = 1; t <= i; t++) { #>
        private readonly TArg<#= t #> _arg<#= t #>;
<# } #>

        /// <summary>
        /// TBD
        /// </summary>
        /// <param name="actionWithState">TBD</param>
<# for (var t = 1; t <= i; t++) { #>
        /// <param name="arg<#= t #>">TBD</param>
<# } #>
        public ActionWithStateRunnable(Action<<#= types #>> actionWithState, <#= typeAndArguments #>)
        {
            _actionWithState = actionWithState;
<# for (var t = 1; t <= i; t++) { #>
            _arg<#= t #> = arg<#= t #>;
<# } #>
        }

        /// <summary>
        /// TBD
        /// </summary>
        public void Run()
        {
            _actionWithState(<#= arguments #>);
        }

<#
    if (i == 1)
    {
#>
        /// <inheritdoc />
        public override void Run(TArg1 arg)
        {
            _actionWithState(arg);
        }
<#
    }
    else
    {
#>
        /// <inheritdoc />
        public override void Run(TArg1 arg)
        {
            _actionWithState(arg, <#= args2 #>);
        }
<#
    }
#>

        /// <summary>TBD</summary>
        /// <returns>TBD</returns>
        public RunnableTaskWrapper WrapTask() => new RunnableTaskWrapper(InternalWrapTaskAction, this);

        private static readonly Action<object> InternalWrapTaskAction = InternalWrapTask;
        private static void InternalWrapTask(object state)
        {
            var owner = (ActionWithStateRunnable<<#= types #>>)state;
            owner._actionWithState(<#= args #>);
        }
    }
<# } #>
}
