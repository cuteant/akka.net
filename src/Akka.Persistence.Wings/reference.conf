akka.persistence{
	journal {
		wings {
			# qualified type name of the PostgreSql persistence journal actor
			class = "Akka.Persistence.Wings.Journal.WingJournal, Akka.Persistence.Wings"

			# dispatcher used to drive journal actor
			plugin-dispatcher = "akka.actor.default-dispatcher"

			singleton-db-server = true
			db-server-sharding-mode = guidbasedtiny

			singleton-database = true
			database-sharding-mode = guidbasedtiny

			singleton-table = true
			table-sharding-mode = guidbasedtiny

			connection-name = AkkaJournal
			database-name = AkkaJournal

			serializer = ""

			# should corresponding journal table be initialized automatically
			auto-initialize = off
			
			# timestamp provider used for generation of journal entries timestamps
			timestamp-provider = "Akka.Persistence.Wings.Journal.DefaultTimestampProvider, Akka.Persistence.Wings"

			# Setting used to toggle sequential read access when loading large objects
			# from journals and snapshot stores.
			sequential-access = off
			
			circuit-breaker {
				max-failures = 5
				call-timeout = 20s
				reset-timeout = 60s
			}
		}
	}

	snapshot-store {
		wings {
			# qualified type name of the PostgreSql persistence journal actor
			class = "Akka.Persistence.Wings.Snapshot.WingSnapshotStore, Akka.Persistence.Wings"

			# dispatcher used to drive journal actor
			plugin-dispatcher = ""akka.actor.default-dispatcher""

			singleton-db-server = true
			db-server-sharding-mode = guidbasedtiny

			singleton-database = true
			database-sharding-mode = guidbasedtiny

			singleton-table = true
			table-sharding-mode = guidbasedtiny

			connection-name = AkkaSnapshot
			database-name = AkkaSnapshot

			connection-timeout = 30s

			schema-name = public

			table-name = snapshot_store

			serializer = ""

			# should corresponding journal table be initialized automatically
			auto-initialize = off

			# Setting used to toggle sequential read access when loading large objects
			# from journals and snapshot stores.
			sequential-access = off
		}
	}
}